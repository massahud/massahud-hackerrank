/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package castleonthegrid;

import java.util.*;

public class Solution {

    static enum Dir {
        H('\u2550'),
        V('\u2551'),
        B('\u256c');

        final char ch;

        private Dir(char ch) {
            this.ch = ch;
        }
    }

    private static class Node {

        private final int line;
        private final int col;
        private final List<Node> previous;
        private boolean visited;
        private Integer cost = Integer.MAX_VALUE;
        private Dir dir;
        private final HashSet<Node> nexts;
        private static final Map<EnumSet<Gate>, Character> charMap;

        static {
            charMap = new HashMap<>(5);
            charMap.put(EnumSet.of(Gate.EAST, Gate.WEST), '═');
            charMap.put(EnumSet.of(Gate.EAST, Gate.NORTH), '╚');
            charMap.put(EnumSet.of(Gate.EAST, Gate.SOUTH), '╔');
            charMap.put(EnumSet.of(Gate.WEST, Gate.NORTH), '╝');
            charMap.put(EnumSet.of(Gate.WEST, Gate.SOUTH), '╗');
            charMap.put(EnumSet.of(Gate.NORTH, Gate.SOUTH), '║');
            charMap.put(EnumSet.of(Gate.EAST, Gate.WEST, Gate.NORTH), '╩');
            charMap.put(EnumSet.of(Gate.EAST, Gate.WEST, Gate.SOUTH), '╦');
            charMap.put(EnumSet.of(Gate.NORTH, Gate.SOUTH, Gate.EAST), '╠');
            charMap.put(EnumSet.of(Gate.NORTH, Gate.SOUTH, Gate.WEST), '╣');
            charMap.put(EnumSet.of(Gate.NORTH, Gate.SOUTH, Gate.EAST,
                    Gate.WEST), '╬');
        }

        public Node(int line, int col) {
            this.line = line;
            this.col = col;
            this.previous = new ArrayList<>();
            this.nexts = new HashSet<>();
        }

        public boolean addPrevious(Node previous) {
            int costFromPrevious = calculateCost(previous, this);
            boolean added = false;
            if (costFromPrevious < this.cost) {
                this.dir = previous.line == this.line
                        ? Dir.H : Dir.V;
                this.cost = costFromPrevious;
                for (Node p : nexts) {
                    p.removeNext(this);
                }
                this.previous.clear();
                this.previous.add(previous);
                previous.addNext(this);
                added = true;
            } else if (costFromPrevious == this.cost) {
                if (dir == Dir.H && previous.col == col
                        || dir == Dir.V && previous.line == line) {
                    dir = Dir.B;
                }
                this.cost = costFromPrevious;
                this.previous.add(previous);
                previous.addNext(this);
                added = true;
            }
            return added;
        }

        public int getCost() {
            return cost;
        }

        public int manhattan(Node n) {
            return Math.abs(this.col - n.col) + Math.abs(this.line - n.line);
        }

        static enum Gate {
            NORTH,
            SOUTH,
            EAST,
            WEST;
        };

        public char getCh() {
            EnumSet<Gate> gates = EnumSet.noneOf(Gate.class);

            for (Node n : previous) {
                if (n.col == col) {
                    if (n.line < line) {
                        gates.add(Gate.NORTH);
                    } else {
                        gates.add(Gate.SOUTH);
                    }
                } else if (n.col < col) {
                    gates.add(Gate.WEST);
                } else {
                    gates.add(Gate.EAST);
                }
            }

            for (Node n : nexts) {
                if (n.col == col) {
                    if (n.line < line) {
                        gates.add(Gate.NORTH);
                    } else {
                        gates.add(Gate.SOUTH);
                    }
                } else if (n.col < col) {
                    gates.add(Gate.WEST);
                } else {
                    gates.add(Gate.EAST);
                }
            }
            Character ch = charMap.get(gates);
            if (ch == null) {
                return dir.ch;
            }
            return ch;
        }

        public void addNext(Node next) {
            nexts.add(next);
        }

        public void removeNext(Node next) {
            nexts.remove(next);
        }

    }

    private static class DirectedComparator implements Comparator<Node> {

        private final Node end;

        public DirectedComparator(Node end) {
            this.end = end;
        }

        @Override
        public int compare(Node n1, Node n2) {
            int ret = n1.getCost() - n2.getCost();
            if (ret == 0) {
                return end.manhattan(n1) - end.manhattan(n2);
            }
            return ret;
        }

    }

    public static void main(String[] args) {

//        Scanner scan = new Scanner(System.in);
        Scanner scan = new Scanner("10\n"
                + ".X..XX...X\n"
                + "X.........\n"
                + ".X.......X\n"
                + "..........\n"
                + "........X.\n"
                + ".X...XXX..\n"
                + ".....X..XX\n"
                + ".....X.X..\n"
                + "..........\n"
                + ".....X..XX\n"
                + "9 1 9 6");
//        Scanner scan = new Scanner("40\n"
//                + "...X......XX.X...........XX....X.XX.....\n"
//                + ".X..............X...XX..X...X........X.X\n"
//                + "......X....X....X.........X...........X.\n"
//                + ".X.X.X..X........X.....X.X...X.....X..X.\n"
//                + "....X.X.X...X..........X..........X.....\n"
//                + "..X......X....X....X...X....X.X.X....XX.\n"
//                + "...X....X.......X..XXX.......X.X.....X..\n"
//                + "...X.X.........X.X....X...X.........X...\n"
//                + "XXXX..X......X.XX......X.X......XX.X..XX\n"
//                + ".X........X....X.X......X..X....XX....X.\n"
//                + "...X.X..X.X.....X...X....X..X....X......\n"
//                + "....XX.X.....X.XX.X...X.X.....X.X.......\n"
//                + ".X.X.X..............X.....XX..X.........\n"
//                + "..X...............X......X........XX...X\n"
//                + ".X......X...X.XXXX.....XX...........X..X\n"
//                + "...X....XX....X...XX.X..X..X..X.....X..X\n"
//                + "...X...X.X.....X.....X.....XXXX.........\n"
//                + "X.....XX..X.............X.XX.X.XXX......\n"
//                + ".....X.X..X..........X.X..X...X.X......X\n"
//                + "...X.....X..X.............X......X..X..X\n"
//                + "........X.....................X....X.X..\n"
//                + "..........X.....XXX...XX.X..............\n"
//                + "........X..X..........X.XXXX..X.........\n"
//                + "..X..X...X.......XX...X.....X...XXX..X..\n"
//                + ".X.......X..............X....X...X....X.\n"
//                + ".................X.....X......X.....X...\n"
//                + ".......X.X.XX..X.XXX.X.....X..........X.\n"
//                + "X..X......X..............X..X.X.......X.\n"
//                + "X........X.....X.....X....XX.......XX...\n"
//                + "X.....X.................X.....X..X...XXX\n"
//                + "XXX..X..X.X.XX..X....X.....XXX..X......X\n"
//                + "..........X.....X.....XX................\n"
//                + "..X.........X..X.........X...X.....X....\n"
//                + ".X.X....X...XX....X...............X.....\n"
//                + ".X....X....XX.XX........X..X............\n"
//                + "X...X.X................XX......X..X.....\n"
//                + "..X.X.......X.X..X.....XX.........X..X..\n"
//                + "........................X..X.XX..X......\n"
//                + "........X..X.X.....X.....X......X.......\n"
//                + ".X..X....X.X......XX....................\n"
//                + "34 28 16 8");
//        Scanner scan = new Scanner("100\n"
//                + ".............X......................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "X...................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "....................................................................................................\n"
//                + "0 0 99 99");
        final int n = scan.nextInt();
        final Node[][] map = new Node[n][n];
        for (int i = 0; i < n; i++) {
            String line = scan.next();
            for (int j = 0; j < n; j++) {
                if (line.charAt(j) == '.') {
                    map[i][j] = new Node(i, j);
                }
            }
        }
        int a = scan.nextInt();
        int b = scan.nextInt();
        int c = scan.nextInt();
        int d = scan.nextInt();
        if (a == c && b == d) {
            System.out.println(0);
            return;
        }
        final Node start = map[a][b];
        final Node end = map[c][d];
        PriorityQueue<Node> queue = new PriorityQueue<Node>(n * n, new DirectedComparator(end));

//        LinkedList<Node> queue = new LinkedList<>();
        start.visited = true;
        start.dir = Dir.B;
        start.cost = 1;
        queue.offer(start);

        int queueMax = 0;
        while (!queue.isEmpty()) {
            Node actual = queue.poll();
            queueMax = Math.max(queue.size(), queueMax);
            if (actual.equals(end)) {
                break;
            }
            if (actual.line > 0
                    && map[actual.line - 1][actual.col] != null
                    && !actual.previous.contains(map[actual.line - 1][actual.col])
                    && (!map[actual.line - 1][actual.col].visited
                    || calculateCost(actual, map[actual.line - 1][actual.col]) <= map[actual.line - 1][actual.col].getCost())) {

                visit(map, queue, map[actual.line - 1][actual.col], actual);

            }
            if (actual.line < n - 1
                    && map[actual.line + 1][actual.col] != null
                    && !actual.previous.contains(map[actual.line + 1][actual.col])
                    && (!map[actual.line + 1][actual.col].visited
                    || calculateCost(actual, map[actual.line + 1][actual.col]) <= map[actual.line + 1][actual.col].getCost())) {
                visit(map, queue, map[actual.line + 1][actual.col], actual);

            }
            if (actual.col > 0
                    && map[actual.line][actual.col - 1] != null
                    && !actual.previous.contains(map[actual.line][actual.col - 1])
                    && (!map[actual.line][actual.col - 1].visited
                    || calculateCost(actual, map[actual.line][actual.col - 1]) <= map[actual.line][actual.col - 1].getCost())) {
                visit(map, queue, map[actual.line][actual.col - 1], actual);

            }
            if (actual.col < n - 1
                    && map[actual.line][actual.col + 1] != null
                    && !actual.previous.contains(map[actual.line][actual.col + 1])
                    && (!map[actual.line][actual.col + 1].visited
                    || calculateCost(actual, map[actual.line][actual.col + 1]) <= map[actual.line][actual.col + 1].getCost())) {
                visit(map, queue, map[actual.line][actual.col + 1], actual);

            }
        }

        System.out.println(end.getCost());
        System.out.flush();
        LinkedHashSet<Node> path = new LinkedHashSet<>();
        char[] separatorArray = new char[n+2];
        Arrays.fill(separatorArray, '-');
        String separator = String.valueOf(separatorArray);
        System.err.println("All paths found until break:");
        System.err.println(separator);
        printMap(map, path, start, end);

        HashSet<Node> nodes = new HashSet<>();
        nodes.add(end);
        Node previous = null;
        while (!nodes.isEmpty()) {
            Node node = nodes.iterator().next();
            nodes.remove(node);
            path.add(node);
            PREVIOUS:
            for (Node pv : node.previous) {
                // Solve corners
                if (node.previous.size() > 1) {
                    if (pv.cost.equals(node.cost)) {
                        for (Node next : node.nexts) {
                            if (next.cost.equals(node.cost)
                                    && path.contains(next)) {
                                if (next.col == node.col) {
                                    if (pv.col != node.col) {
                                        continue PREVIOUS;
                                    }
                                } else if (pv.line != node.line) {
                                    continue PREVIOUS;
                                }
                            }
                        }
                    }
                }
                if (!path.contains(pv)) {
                    nodes.add(pv);
                }
            }
        }

        System.err.println(separator);
        System.err.println("Paths from start to end:");
        System.err.println(separator);
        printMap(map, path, start, end);
//        System.err.println("Queue max size: " + queueMax);
        System.err.println(separator);

    }

    private static void visit(Node[][] map, PriorityQueue<Node> queue, Node node, Node previous) {
        node.visited = true;

        queue.remove(node);
        node.addPrevious(previous);
        queue.offer(node);
    }

    private static int calculateCost(Node from, Node to) {
        if (from.previous.isEmpty()) {
            return 1;
        }
        switch (from.dir) {
            case H:
                return from.cost + (from.line == to.line ? 0 : 1);
            case V:
                return from.cost + (from.col == to.col ? 0 : 1);
            default:
                return from.cost;
        }
    }

    private static void printMap(Node[][] map, Collection<Node> path,
            Node start, Node end) {

        for (int i = 0; i < map.length; i++) {
            System.err.print("|");
            for (int j = 0, jj = map[i].length; j < jj; j++) {
                if (map[i][j] == null) {
                    System.err.print('X');
                } else if (i == start.line && j == start.col) {
                    System.err.print('S');
                } else if (i == end.line && j == end.col) {
                    System.err.print('E');
                } else if (path.contains(map[i][j])) {
                    System.err.print(map[i][j].getCh());
                } else if (path.isEmpty() && map[i][j].dir != null) {
                    System.err.print(map[i][j].getCh());
                } else {
                    System.err.print('.');
                }
            }
            System.err.println("|");
        }
    }
}
